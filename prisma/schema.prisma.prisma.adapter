// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  name          String    @db.VarChar(50)
  password      String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]

  camps    Camp[]
  comments Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Camp {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(50)
  content   String    @db.Text
  image     String    @db.VarChar(100)
  rating    Int       @db.TinyInt
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  Int?
  comments  Comment[]

  @@index([authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   Int?
  camp      Camp?    @relation(fields: [campId], references: [id], onDelete: Cascade)
  campId    Int?

  @@index([ownerId])
  @@index([campId])
}
